{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","songs","randomAnswers","shuffled","sound","Sound","status","STOPPED","found","axios","get","then","track","setState","concat","toConsumableArray","mp3","data","preview","title","a","i","length","j","Math","floor","random","_ref","push","item","alert","startSound","PLAYING","_this2","react_default","createElement","className","lib_default","url","playStatus","onClick","map","key","checkAnswer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTA+FeA,cAlFb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KARRQ,MAAQ,CACNC,MAAO,GACPC,cAAgB,GAChBC,SAAU,GACVC,MAAOC,IAAMC,OAAOC,QACpBC,OAAO,GAKPC,IAAMC,IAAN,4EACGC,KAAK,SAAAC,GAEJnB,EAAKoB,SAAS,CAACZ,MAAK,GAAAa,OAAApB,OAAAqB,EAAA,EAAArB,CAAKD,EAAKO,MAAMC,OAAhB,CAAuB,CAACe,IAAKJ,EAAMK,KAAKC,QAASC,MAAOP,EAAMK,KAAKE,WAIvF,IADA,IAAIC,EAAC,GAAAN,OAAApB,OAAAqB,EAAA,EAAArB,CAAOD,EAAKO,MAAME,eAAlB,CAAiCT,EAAKO,MAAMC,MAAM,GAAGkB,QACjDE,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACP,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFgCM,EAAA,GAE5BP,EAAEG,GAF0BI,EAAA,GAIvClC,EAAKoB,SAAS,CAACV,SAAUiB,MAI7B,IAAIlB,EAAgB,GAlBH,OAmBjBA,EAAc0B,KAAK,iBACnB1B,EAAc0B,KAAK,2BACnB1B,EAAc0B,KAAK,aACnB1B,EAAc0B,KAAK,eACnBnC,EAAKO,MAAME,cAAgBA,EAvBVT,2EA0BPoC,GACLA,IAASjC,KAAKI,MAAMC,MAAM,GAAGkB,OAChCW,MAAM,SACNlC,KAAKiB,SAAS,CAACL,OAAO,IACtBZ,KAAKmC,cAGLD,MAAM,6CAKHlC,KAAKI,MAAMI,QAAUC,IAAMC,OAAO0B,QACrCpC,KAAKiB,SAAS,CAACT,MAAQC,IAAMC,OAAOC,UAGpCX,KAAKiB,SAAS,CAACT,MAAQC,IAAMC,OAAO0B,2CAI/B,IAAAC,EAAArC,KACP,MAAoC,qBAAxBA,KAAKI,MAAMC,MAAM,GAEzBiC,EAAAd,EAAAe,cAAA,OAAKC,UAAU,OACbF,EAAAd,EAAAe,cAAA,UAAQC,UAAU,cAChBF,EAAAd,EAAAe,cAAA,uBADF,gCAKED,EAAAd,EAAAe,cAACE,EAAAjB,EAAD,CAAOkB,IAAK1C,KAAKI,MAAMC,MAAM,GAAGe,IAAKuB,WAAY3C,KAAKI,MAAMI,QAC5D8B,EAAAd,EAAAe,cAAA,UAAQK,QAAS,kBAAMP,EAAKF,eAA5B,gBACAG,EAAAd,EAAAe,cAAA,WACCvC,KAAKI,MAAMG,SAASsC,IAAI,SAACZ,EAAMa,GAAP,OACrBR,EAAAd,EAAAe,cAAA,UAAQK,QAAS,kBAAMP,EAAKU,YAAYd,IAAOa,IAAKA,GAAKR,EAAAd,EAAAe,cAAA,cAASN,MAErEjC,KAAKI,MAAMQ,OACV0B,EAAAd,EAAAe,cAAA,yDASRD,EAAAd,EAAAe,cAAA,OAAKC,UAAU,OACbF,EAAAd,EAAAe,cAAA,UAAQC,UAAU,cAChBF,EAAAd,EAAAe,cAAA,gCAjFQS,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAd,EAAAe,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.1808c31c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Sound from 'react-sound';\n\nclass App extends Component {\n  state = {\n    songs: [],\n    randomAnswers : [],\n    shuffled: [],\n    sound: Sound.status.STOPPED,\n    found: false\n  }\n  constructor(props) {\n    super(props);\n    // Fetch couple of songs to guess\n    axios.get(`https://cors-anywhere.herokuapp.com/https://api.deezer.com/track/3135556`)\n      .then(track => {\n        // console.log(track);\n        this.setState({songs:[...this.state.songs, {mp3: track.data.preview, title: track.data.title}]});\n\n        // shuffle answers\n        let a = [...this.state.randomAnswers, this.state.songs[0].title];\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        this.setState({shuffled: a});\n      });\n    \n    // Populate randon answers array\n    let randomAnswers = [];\n    randomAnswers.push(\"Staying Alive\");\n    randomAnswers.push(\"Les démons de minuit\");\n    randomAnswers.push(\"Get Lucky\");\n    randomAnswers.push(\"Uptown Funk\");\n    this.state.randomAnswers = randomAnswers;\n  }\n\n  checkAnswer(item) {\n    if ( item === this.state.songs[0].title ) {\n      alert(\"OUIII\");\n      this.setState({found: true});\n      this.startSound();\n    }\n    else {\n      alert(\"FAUX\");\n    }\n  }\n\n  startSound() { \n    if ( this.state.sound === Sound.status.PLAYING) {\n      this.setState({sound : Sound.status.STOPPED});\n    }\n    else {\n      this.setState({sound : Sound.status.PLAYING});\n    }\n  }\n\n  render() {\n    if ( typeof this.state.songs[0] !== \"undefined\") { \n      return (\n        <div className=\"App\">\n          <header className=\"App-header\"> \n            <p>\n              Blind Test\n            </p> \n            Devinez quel est ce titre ... \n            <Sound url={this.state.songs[0].mp3} playStatus={this.state.sound}/>\n            <button onClick={() => this.startSound()}>Écouter !</button>\n            <hr />\n            {this.state.shuffled.map((item, key) =>\n                <button onClick={() => this.checkAnswer(item)} key={key}><strong>{item}</strong></button>\n            )}\n            {this.state.found &&\n              <h2>\n                BRAVO, VOUS AVEZ TROUVÉ OH LÀ LÀ\n              </h2>\n            }\n          </header>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"> \n          <p>\n            Blind Test\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}